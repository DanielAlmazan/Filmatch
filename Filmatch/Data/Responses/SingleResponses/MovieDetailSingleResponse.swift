//
//  MovieDetailSingleResponse.swift
//  Filmatch
//
//  Created by Daniel Enrique Almazán Sellés on 23/7/24.
//

import Foundation

// MARK: - MovieDetailSingleResponse

/// `MovieDetailSingleResponse` represents detailed information about a movie.
/// It includes various properties such as title, genres, overview, and associated media like videos and credits.
final class MovieDetailSingleResponse: Identifiable, Sendable {
  /// Indicates whether the movie is for adults only.
  let adult: Bool
  /// The path to the backdrop image of the movie.
  let backdropPath: String?
  /// The collection to which the movie belongs, if any.
  let belongsToCollection: MovieCollectionSingleResponse?
  /// The budget of the movie in dollars.
  let budget: Int?
  /// An array of genres associated with the movie.
  let genres: [Genre]
  /// The homepage URL of the movie.
  let homepage: String?
  /// The unique identifier of the movie.
  let id: Int
  /// The IMDB ID of the movie.
  let imdbId: String?
  /// The origin countries of the movie.
  let originCountry: [String]
  /// The original language of the movie.
  let originalLanguage: String?
  /// The original title of the movie.
  let originalTitle: String
  /// A brief overview or synopsis of the movie.
  let overview: String
  /// The popularity score of the movie.
  let popularity: Double
  /// The path to the poster image of the movie.
  let posterPath: String?
  /// An array of production companies involved in the movie.
  let productionCompanies: [ProductionCompany]
  /// An array of countries where the movie was produced.
  let productionCountries: [Country]
  /// The release date of the movie.
  let releaseDate: Date?
  /// The revenue generated by the movie in dollars.
  let revenue: Int?
  /// The runtime of the movie in minutes.
  let runtime: Int?
  /// An array of languages spoken in the movie.
  let spokenLanguages: [LanguageModel]
  /// The current status of the movie (e.g., "Released").
  let status: String?
  /// The tagline of the movie.
  let tagline: String?
  /// The title of the movie.
  let title: String?
  /// Indicates whether the movie has a video associated.
  let voteAverage: Double
  /// The average vote score of the movie.
  let voteCount: Int
  /// The total number of votes the movie has received.
  let video: Bool
  /// The videos associated with the movie.
  let videos: MovieVideosAppendResponse
  /// The credits (cast and crew) associated with the movie.
  let credits: MovieCreditsAppendResponse
  
  /// Initializes a new `MovieDetailSingleResponse` instance.
  /// - Parameters:
  ///   - id: The unique identifier of the movie.
  ///   - adult: Indicates whether the movie is for adults only.
  ///   - backdropPath: The path to the backdrop image of the movie.
  ///   - belongsToCollection: The collection to which the movie belongs, if any.
  ///   - budget: The budget of the movie in dollars.
  ///   - genres: An array of genres associated with the movie.
  ///   - homepage: The homepage URL of the movie.
  ///   - imdbId: The IMDB ID of the movie.
  ///   - originCountry: The origin countries of the movie.
  ///   - originalLanguage: The original language of the movie.
  ///   - originalTitle: The original title of the movie.
  ///   - overview: A brief overview or synopsis of the movie.
  ///   - popularity: The popularity score of the movie.
  ///   - posterPath: The path to the poster image of the movie.
  ///   - productionCompanies: An array of production companies involved in the movie.
  ///   - productionCountries: An array of countries where the movie was produced.
  ///   - releaseDate: The release date of the movie.
  ///   - revenue: The revenue generated by the movie in dollars.
  ///   - runtime: The runtime of the movie in minutes.
  ///   - spokenLanguages: An array of languages spoken in the movie.
  ///   - status: The current status of the movie.
  ///   - tagline: The tagline of the movie.
  ///   - title: The title of the movie.
  ///   - video: Indicates whether the movie has a video associated.
  ///   - voteAverage: The average vote score of the movie.
  ///   - voteCount: The total number of votes the movie has received.
  ///   - videos: The videos associated with the movie.
  ///   - credits: The credits (cast and crew) associated with the movie.
  init(
    adult: Bool,
    backdropPath: String?,
    belongsToCollection: MovieCollectionSingleResponse?,
    budget: Int?,
    genres: [Genre],
    homepage: String?,
    id: Int,
    imdbId: String?,
    originCountry: [String],
    originalLanguage: String?,
    originalTitle: String,
    overview: String,
    popularity: Double,
    posterPath: String?,
    productionCompanies: [ProductionCompany],
    productionCountries: [Country],
    releaseDate: Date?,
    revenue: Int?,
    runtime: Int?,
    spokenLanguages: [LanguageModel],
    status: String?,
    tagline: String?,
    title: String?,
    voteAverage: Double,
    voteCount: Int,
    video: Bool,
    videos: MovieVideosAppendResponse,
    credits: MovieCreditsAppendResponse)
  {
    self.id = id
    self.adult = adult
    self.backdropPath = backdropPath
    self.belongsToCollection = belongsToCollection
    self.budget = budget
    self.genres = genres
    self.homepage = homepage
    self.imdbId = imdbId
    self.originCountry = originCountry
    self.originalLanguage = originalLanguage
    self.originalTitle = originalTitle
    self.overview = overview
    self.popularity = popularity
    self.posterPath = posterPath
    self.productionCompanies = productionCompanies
    self.productionCountries = productionCountries
    self.releaseDate = releaseDate
    self.revenue = revenue
    self.runtime = runtime
    self.spokenLanguages = spokenLanguages
    self.status = status
    self.tagline = tagline
    self.title = title
    self.video = video
    self.voteAverage = voteAverage
    self.voteCount = voteCount
    self.videos = videos
    self.credits = credits
  }
}

extension MovieDetailSingleResponse: Codable {
  // MARK: - CodingKeys
  enum CodingKeys: String, CodingKey {
    case id, adult, budget, genres, overview, popularity, revenue, runtime, status, tagline, title, video, videos, credits
    case backdropPath = "backdrop_path"
    case belongsToCollection = "belongs_to_collection"
    case homepage
    case imdbId = "imdb_id"
    case originCountry = "origin_country"
    case originalLanguage = "original_language"
    case originalTitle = "original_title"
    case posterPath = "poster_path"
    case productionCompanies = "production_companies"
    case productionCountries = "production_countries"
    case releaseDate = "release_date"
    case spokenLanguages = "spoken_languages"
    case voteAverage = "vote_average"
    case voteCount = "vote_count"
  }
  
  convenience init(from decoder: any Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    
    let adult = try container.decode(Bool.self, forKey: .adult)
    let backdropPath = try container.decode(String?.self, forKey: .backdropPath)
    let belongsToCollection = try container.decode(MovieCollectionSingleResponse?.self, forKey: .belongsToCollection)
    let budget = try container.decode(Int?.self, forKey: .budget)
    let genres = try container.decode([Genre].self, forKey: .genres)
    let homepage = try container.decode(String?.self, forKey: .homepage)
    let id = try container.decode(Int.self, forKey: .id)
    let imdbId = try container.decode(String?.self, forKey: .imdbId)
    let originCountry = try container.decode([String].self, forKey: .originCountry)
    let originalLanguage = try container.decode(String?.self, forKey: .originalLanguage)
    let originalTitle = try container.decode(String.self, forKey: .originalTitle)
    let overview = try container.decode(String.self, forKey: .overview)
    let popularity = try container.decode(Double.self, forKey: .popularity)
    let posterPath = try container.decode(String?.self, forKey: .posterPath)
    let productionCompanies = try container.decode([ProductionCompany].self, forKey: .productionCompanies)
    let productionCountries = try container.decode([Country].self, forKey: .productionCountries)
    
    let releaseDateString = try container.decode(String?.self, forKey: .releaseDate)
    let releaseDate: Date? = {
      guard let dateStr = releaseDateString else { return nil }
      return Utilities.dateFormatter.date(from: dateStr)
    }()
    
    let revenue = try container.decode(Int?.self, forKey: .revenue)
    let runtime = try container.decode(Int?.self, forKey: .runtime)
    let spokenLanguages = try container.decode([LanguageModel].self, forKey: .spokenLanguages)
    let status = try container.decode(String?.self, forKey: .status)
    let tagline = try container.decode(String?.self, forKey: .tagline)
    let title = try container.decode(String?.self, forKey: .title)
    let voteAverage = try container.decode(Double.self, forKey: .voteAverage)
    let voteCount = try container.decode(Int.self, forKey: .voteCount)
    let video = try container.decode(Bool.self, forKey: .video)
    let videos = try container.decode(MovieVideosAppendResponse.self, forKey: .videos)
    let credits = try container.decode(MovieCreditsAppendResponse.self, forKey: .credits)
    
    self.init(adult: adult,
              backdropPath: backdropPath,
              belongsToCollection: belongsToCollection,
              budget: budget,
              genres: genres,
              homepage: homepage,
              id: id,
              imdbId: imdbId,
              originCountry: originCountry,
              originalLanguage: originalLanguage,
              originalTitle: originalTitle,
              overview: overview,
              popularity: popularity,
              posterPath: posterPath,
              productionCompanies: productionCompanies,
              productionCountries: productionCountries,
              releaseDate: releaseDate,
              revenue: revenue,
              runtime: runtime,
              spokenLanguages: spokenLanguages,
              status: status,
              tagline: tagline,
              title: title,
              voteAverage: voteAverage,
              voteCount: voteCount,
              video: video,
              videos: videos,
              credits: credits)
  }
}

// MARK: - CustomStringConvertible

extension MovieDetailSingleResponse: CustomStringConvertible {
  /// A textual description of the movie, including key properties.
  var description: String {
    let genreNames = genres.map { $0.name ?? "nil" }.joined(separator: ", ")
    return """
        Movie:
        - Title: \(title ?? "nil")
        - Original Title: \(originalTitle)
        - Release Date: \(releaseDate?.description ?? "nil")
        - Genres: \(genreNames)
        - Overview: \(overview)
        - Popularity: \(popularity)
        - Vote Average: \(voteAverage)
        - Vote Count: \(voteCount)
        - Runtime: \(runtime?.description ?? "nil") minutes
        - Status: \(status ?? "nil")
        - Tagline: \(tagline ?? "nil")
        - Homepage: \(homepage ?? "nil")
        - IMDB ID: \(imdbId ?? "nil")
        """
  }
}
